/**
 * Redes Integradas de Telecomunicacoes MEEC/MIEEC/MERSIM 2024/2025
 *
 * Router.java
 *
 * Main class and graphic interface class with auxiliary functions
 *
 * @author Luis Bernardo
 */
package router;

import java.io.*;
import java.net.*;

/**
 * Main class and graphic interface class with auxiliar functions
 */
public class Router extends javax.swing.JFrame {
    
    /** Packet's type codes */
    public final static byte PKT_BYE = 1;    
    public final static byte PKT_HELLO = 2;    
    public final static byte PKT_DATA = 10;    
    public final static byte PKT_ROUTE = 99;    

    /** Maximum valid distance for a route, above or equal is infinity */
    public final static int MAX_DISTANCE = 20;
    /** Maximum path length for a DATA packet */
    public final static int MAX_PATH_LEN = 9;
    
    /**
     * Constructor - create a new form router
     */
    public Router() {
        // Start main window
        initComponents();
        // Start Neighbour list
        neig= new NeighbourList(tabelaViz.getRowCount(), this);
        
        ds= null;
        daemon= null;
        route= null;
        local_address= new Address();
        IPaddresses= new LocalIPaddresses(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        editName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        editIP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        editPorto = new javax.swing.JTextField();
        tbuttonActive = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaViz = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        buttonAdd = new javax.swing.JButton();
        buttonRem = new javax.swing.JButton();
        buttonDist = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        editNeigName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        editNeigDist = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        editNeigIP = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        editNeigPorto = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        buttonHierarchical = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        editPeriodo = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaRoute = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        buttonEnviar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        editNomeDest = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        editMensagem = new javax.swing.JTextField();
        buttonClear = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();

        setTitle("Router RIT by 70392 and ?????");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setMaximumSize(new java.awt.Dimension(390, 35));
        jPanel1.setMinimumSize(new java.awt.Dimension(320, 35));
        jPanel1.setPreferredSize(new java.awt.Dimension(390, 35));

        jLabel1.setText("Local :");
        jPanel1.add(jLabel1);

        editName.setText("A.1");
        editName.setMaximumSize(new java.awt.Dimension(44, 19));
        editName.setMinimumSize(new java.awt.Dimension(18, 19));
        editName.setPreferredSize(new java.awt.Dimension(37, 19));
        jPanel1.add(editName);

        jLabel2.setText("IP");
        jPanel1.add(jLabel2);

        editIP.setText("127.0.0.1");
        editIP.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel1.add(editIP);

        jLabel3.setText("Port");
        jPanel1.add(jLabel3);

        editPorto.setText("20000");
        jPanel1.add(editPorto);

        tbuttonActive.setText("Active");
        tbuttonActive.setMargin(new java.awt.Insets(1, 2, 1, 2));
        tbuttonActive.setPreferredSize(new java.awt.Dimension(73, 25));
        tbuttonActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbuttonActiveActionPerformed(evt);
            }
        });
        jPanel1.add(tbuttonActive);

        getContentPane().add(jPanel1);

        jPanel2.setMaximumSize(new java.awt.Dimension(320, 140));
        jPanel2.setMinimumSize(new java.awt.Dimension(320, 75));
        jPanel2.setPreferredSize(new java.awt.Dimension(320, 75));
        jPanel2.setLayout(null);

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(300, 140));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(300, 70));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 70));

        tabelaViz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Addr", "IP", "Port", "Distance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaViz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaVizMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaViz);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 5, 300, 70);

        getContentPane().add(jPanel2);

        jPanel3.setMaximumSize(new java.awt.Dimension(390, 35));
        jPanel3.setMinimumSize(new java.awt.Dimension(320, 65));
        jPanel3.setPreferredSize(new java.awt.Dimension(390, 35));

        jLabel7.setText("Neig :");
        jPanel3.add(jLabel7);

        buttonAdd.setText("Add Neig");
        buttonAdd.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonAdd.setMaximumSize(new java.awt.Dimension(90, 26));
        buttonAdd.setMinimumSize(new java.awt.Dimension(80, 25));
        buttonAdd.setPreferredSize(new java.awt.Dimension(90, 25));
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        jPanel3.add(buttonAdd);

        buttonRem.setText("Rem. Neig");
        buttonRem.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonRem.setMaximumSize(new java.awt.Dimension(90, 26));
        buttonRem.setMinimumSize(new java.awt.Dimension(90, 25));
        buttonRem.setPreferredSize(new java.awt.Dimension(90, 26));
        buttonRem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemActionPerformed(evt);
            }
        });
        jPanel3.add(buttonRem);

        buttonDist.setText("Mod. Neig");
        buttonDist.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonDist.setMaximumSize(new java.awt.Dimension(90, 26));
        buttonDist.setMinimumSize(new java.awt.Dimension(80, 25));
        buttonDist.setPreferredSize(new java.awt.Dimension(90, 26));
        buttonDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDistActionPerformed(evt);
            }
        });
        jPanel3.add(buttonDist);

        getContentPane().add(jPanel3);

        jPanel8.setMaximumSize(new java.awt.Dimension(390, 30));
        jPanel8.setPreferredSize(new java.awt.Dimension(363, 30));

        jLabel11.setText("Addr");
        jPanel8.add(jLabel11);

        editNeigName.setText("A.2");
        editNeigName.setMaximumSize(new java.awt.Dimension(44, 2147483647));
        editNeigName.setPreferredSize(new java.awt.Dimension(37, 20));
        jPanel8.add(editNeigName);

        jLabel10.setText(" Dist.");
        jPanel8.add(jLabel10);

        editNeigDist.setText("1");
        editNeigDist.setMinimumSize(new java.awt.Dimension(20, 20));
        editNeigDist.setPreferredSize(new java.awt.Dimension(30, 20));
        jPanel8.add(editNeigDist);

        jLabel8.setText("IP");
        jPanel8.add(jLabel8);

        editNeigIP.setText("127.1.1.1");
        editNeigIP.setMinimumSize(new java.awt.Dimension(70, 20));
        editNeigIP.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel8.add(editNeigIP);

        jLabel9.setText("Port");
        jPanel8.add(jLabel9);

        editNeigPorto.setText("20000");
        editNeigPorto.setMinimumSize(new java.awt.Dimension(45, 20));
        editNeigPorto.setPreferredSize(new java.awt.Dimension(55, 20));
        jPanel8.add(editNeigPorto);

        getContentPane().add(jPanel8);

        jLabel12.setText("Routing control: ");
        jPanel7.add(jLabel12);

        buttonHierarchical.setText("Hierarchical");
        buttonHierarchical.setMaximumSize(new java.awt.Dimension(140, 23));
        buttonHierarchical.setMinimumSize(new java.awt.Dimension(140, 23));
        buttonHierarchical.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel7.add(buttonHierarchical);

        jLabel6.setText("Period");
        jPanel7.add(jLabel6);

        editPeriodo.setText("5");
        editPeriodo.setPreferredSize(new java.awt.Dimension(30, 19));
        jPanel7.add(editPeriodo);

        getContentPane().add(jPanel7);

        jPanel4.setMaximumSize(new java.awt.Dimension(320, 200));
        jPanel4.setMinimumSize(new java.awt.Dimension(320, 120));
        jPanel4.setPreferredSize(new java.awt.Dimension(320, 120));
        jPanel4.setLayout(null);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(300, 400));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(300, 115));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(300, 115));
        jScrollPane2.setAutoscrolls(true);

        tabelaRoute.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Destination", "Router", "Distance", "Path"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaRoute.setMaximumSize(new java.awt.Dimension(900, 500));
        tabelaRoute.setMinimumSize(new java.awt.Dimension(300, 400));
        tabelaRoute.setPreferredSize(new java.awt.Dimension(700, 400));
        jScrollPane2.setViewportView(tabelaRoute);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(10, 5, 300, 115);

        getContentPane().add(jPanel4);

        jPanel5.setMaximumSize(new java.awt.Dimension(390, 35));
        jPanel5.setMinimumSize(new java.awt.Dimension(320, 35));
        jPanel5.setPreferredSize(new java.awt.Dimension(350, 35));

        buttonEnviar.setText("Send");
        buttonEnviar.setMargin(new java.awt.Insets(2, 5, 2, 5));
        buttonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendActionPerformed(evt);
            }
        });
        jPanel5.add(buttonEnviar);

        jLabel4.setText("Dest:");
        jPanel5.add(jLabel4);

        editNomeDest.setText("A.1");
        editNomeDest.setMaximumSize(new java.awt.Dimension(40, 20));
        editNomeDest.setPreferredSize(new java.awt.Dimension(37, 20));
        jPanel5.add(editNomeDest);

        jLabel5.setText("Msg:");
        jPanel5.add(jLabel5);

        editMensagem.setText("test 1");
        editMensagem.setPreferredSize(new java.awt.Dimension(60, 19));
        jPanel5.add(editMensagem);

        buttonClear.setText("Clear");
        buttonClear.setMargin(new java.awt.Insets(2, 5, 2, 5));
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });
        jPanel5.add(buttonClear);

        getContentPane().add(jPanel5);

        jPanel6.setMaximumSize(new java.awt.Dimension(320, 180));
        jPanel6.setMinimumSize(new java.awt.Dimension(320, 100));
        jPanel6.setPreferredSize(new java.awt.Dimension(320, 180));
        jPanel6.setLayout(null);

        jScrollPane3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jScrollPane3.setMaximumSize(new java.awt.Dimension(301, 175));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(301, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(301, 175));
        jScrollPane3.setAutoscrolls(true);

        logText.setColumns(20);
        logText.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        logText.setMaximumSize(new java.awt.Dimension(900, 1000));
        logText.setMinimumSize(new java.awt.Dimension(180, 100));
        logText.setPreferredSize(new java.awt.Dimension(600, 2000));
        logText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                logTextKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(logText);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(9, 5, 301, 175);

        getContentPane().add(jPanel6);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle key pressing in the log window - control statistics
     * @param evt graphical event
     */
    private void logTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_logTextKeyPressed
        if (evt.getKeyChar() == 's')
            write_statistics();
        if (evt.getKeyChar() == 'z')
            zero_statistics();
    }//GEN-LAST:event_logTextKeyPressed

    /** 
     * Updates edit windows with selected line data 
     * @param evt graphical event
     */
    private void tabelaVizMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaVizMouseClicked
        int row= tabelaViz.getSelectedRow();
        if (row == -1) { // Line not selected
            return;
        }
        for (int i= 0; i<4; i++) {
            String s= (String)tabelaViz.getValueAt(row, i);
            if (s == null)
                return;
            switch (i) {
                case 0: editNeigName.setText(s); break;
                case 1: editNeigIP.setText(s); break;
                case 2: editNeigPorto.setText(s); break;
                case 3: editNeigDist.setText(s); break;
            }
        }
    }//GEN-LAST:event_tabelaVizMouseClicked

    /** 
     * Handle "Clear" button - clear the log window contents 
     * @param evt graphical event
     */
    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        logText.setText("");
    }//GEN-LAST:event_buttonClearActionPerformed

    /**
     * Handle "Send" button - send a DATA test packet 
     * @param evt graphical event
     */
    private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        Address dest= new Address(editNomeDest.getText());
        route.send_data_packet(local_address(), dest,
            editMensagem.getText(), new AddressList());
    }//GEN-LAST:event_buttonSendActionPerformed

    /** 
     * Handle button "Mod. Neig" - changes the distance to the Neighbour 
     * @param evt graphical event
     */
    private void buttonDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDistActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        Address nn= new Address(editNeigName.getText());
        if (neig.locate_neig(nn.toString()) == null) {
            Log("Invalid neighbour\n");
            return;
        }
        try {
            if (neig.update_neig(nn, 
                          editNeigIP.getText(), 
                          Integer.parseInt(editNeigPorto.getText()),
                          Integer.parseInt(editNeigDist.getText()))) { 
                neig.refresh_table(tabelaViz);
            }
        }
        catch (NumberFormatException e) { 
            Log("Invalid number\n");
        }
    }//GEN-LAST:event_buttonDistActionPerformed

    /** 
     * Handle button "Rem. neig" - Removes a Neighbour from the list 
     * @param evt graphical event
     */
    private void buttonRemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        Address nn= new Address(editNeigName.getText());
        if (!nn.is_valid() || (neig.locate_neig(nn.toString()) == null)) {
            Log("Invalid neighbour\n");
            return;
        }
        if (neig.del_neig(nn, true, ds)) {
            neig.refresh_table(tabelaViz);
        }
    }//GEN-LAST:event_buttonRemActionPerformed

    /** 
     * Handle "Add Neig" button - Adds a new Neighbour to the list 
     * @param evt graphical event
     */
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        if (!tbuttonActive.isSelected()) {
            Log("Router is not active\n");
            return;
        }
        // Get the neighbour's IP address (e.g. "127.0.0.1")
        InetAddress neigIPaddress= IPaddresses.parse_and_convert_ip_string(editNeigIP.getText());
        if (neigIPaddress == null) {
            Log("Invalid neighbour's IP address '"+editNeigIP.getText()+"'\n");
            return;
        }
        
        // Get the neighbour's address (e.g. "A.1")
        Address new_address= new Address(editNeigName.getText());
        if (!new_address.is_valid()) {
            Log("Invalid address '"+new_address+"'\n");
            return;
        }
        if (neig.locate_neig(new_address) != null) {
            Log("Duplicate address\n");
            return;
        }
        try {
            if (neig.add_neig(new_address, 
                          neigIPaddress.getHostAddress(), 
                          Integer.parseInt(editNeigPorto.getText()),
                          Integer.parseInt(editNeigDist.getText()),
                          ds)) {
                neig.refresh_table(tabelaViz);
            }
        }
        catch (NumberFormatException e) { 
            Log("Invalid number\n");
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    /** 
     * Handle "Active" button - Activates or stops the address 
     * @param evt graphical event
     */
    private void tbuttonActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbuttonActiveActionPerformed
        if (tbuttonActive.isSelected()) {
            // Update the list of local IP addresses
            IPaddresses.refresh_all_local_IP_addresses(true);
            // Start address          
            boolean activo= false;
            char c;
            int n;
            try {
                if (!local_address.parseAddress(editName.getText())) {
                    Log("Invalid router address\nIt should include network (A) and machine (1):\n e.g. A.1");
                    tbuttonActive.setSelected(false);
                    return;
                }
                c= local_address.network();
                n= local_address.machine();              
                int port= Integer.parseInt(editPorto.getText());
                int period= Integer.parseInt(editPeriodo.getText());
                do {
                    try {
                        ds= new DatagramSocket(port);
                        activo= true;
                    }
                    catch (SocketException se) {
                        // Skip to next letter
                        port++;
                        n++;
                    }
                } while (!activo && (n<=9));
                
                if (!activo) {
                    Log("All machines of network 'A' occupied\n");
                    tbuttonActive.setSelected(false);
                    return;
                }
                 // Update edit boxes with local configuration
                editPorto.setText(""+port);
                editName.setText(""+c+"."+n);
                editIP.setText(IPaddresses.get_default_local_IP_address().getHostAddress());
                local_address.parseAddress(editName.getText());

                // Start daemon thread
                daemon= new UnicastDaemon(this, ds);
                daemon.start();
                // Start Routing timer
                route= new Routing(local_address, neig, buttonHierarchical.isSelected(),
                    period, this, ds, tabelaRoute);
                route.start();
                 // Update edit boxes with default neighbor
                if (n<9) {
                    port++;
                    n++;
                } else {
                    port--;
                    n--;
                }
                editNeigName.setText(""+c+'.'+n);
                editNeigPorto.setText(""+port);
                editNeigIP.setText(IPaddresses.get_default_local_IP_address().getHostAddress());
                // Lock entry windows
                editName.setEditable(false);
                editPorto.setEditable(false);
                editIP.setEditable(false);
                editPeriodo.setEditable(false);
                buttonHierarchical.setEnabled(false);
                //
                zero_statistics();
                
                Log("Router "+editName.getText()+" started\n");
            }
            catch (NumberFormatException e) {
                Log("Numero de porto ou periodo invalido: "+e+"\n");
                tbuttonActive.setSelected(false);
            }
            catch (Exception e) {
                Log("Exception: "+e+"\n");
                tbuttonActive.setSelected(false);
            }
            
        } else {
            // Stop address
            stop_router();
        }
    }//GEN-LAST:event_tbuttonActiveActionPerformed
    
    /**
     * Handle the exit window event - exits the application
     * @param evt graphical event
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        if (tbuttonActive.isSelected())
            stop_router();
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /** 
     * Stops the address 
     */
    private void stop_router() {
        if (daemon != null) {
            daemon.stopRunning();
            daemon= null;
        }
        if (route != null) {
            route.stop();
            route= null;
        }
        if (ds != null) {
            neig.clear_BYE(ds);
            neig.refresh_table(tabelaViz);
            ds.close();
            ds= null;
        }
        if (tbuttonActive.isSelected()) {
            tbuttonActive.setSelected(false);
        }
        editName.setEditable(true);
        editPorto.setEditable(true);
        editIP.setEditable(true);
        editPeriodo.setEditable(true);
        buttonHierarchical.setEnabled(true);
        
        Log("Router "+editName.getText()+" stopped\n");
    }
    
    /**
     * Get the node address in String type from the form
     * @return local address (String)
     */
    public String local_address_string() {
        try {
            return editName.getText();
        }
        catch(Exception e) {
            Log("Local address error: "+e);
        }
        return "*.*";
    }

    /**
     * Get the node address in Address type from the form
     * @return local address (address)
     */
    public Address local_address() {
        return local_address;
    }

    /**
     * Test if nm is the local local_address
     * @param addr test local_address
     * @return true if addresses are equal, false otherwise
     */
    public boolean is_local_address(Address addr) {
        return (local_address.equals(addr));
    }
    
    /**
     * handle incoming packets, decoding and processing HELLO and BYE packets
     * @param dp    datagram packet
     * @param dis   input stream
     * @return true if packet was processed with success, false otherwise
     */
    boolean process_packet(DatagramPacket dp, DataInputStream dis) {
        byte code;
        Address sender= new Address();
        try {
            code= dis.readByte();     // read code
            sender.readAddress(dis);   // read sender id
            InetAddress ip;
            Log("Received packet from "+dp.getAddress().getHostAddress()+":"+dp.getPort()+"\n");
            
            if (IPaddresses.is_local_IP_address(dp.getAddress())) {
                ip= IPaddresses.get_default_local_IP_address();
                if (!ip.equals(dp.getAddress())) {
                    Log("  converting '"+dp.getAddress().getHostAddress()+"' to '"+ip.getHostAddress()+"'\n'");
                    dp.setAddress(ip);
                }
            } else
                ip= dp.getAddress();  // Get sender address               
            
            switch(code) {
                case PKT_HELLO:
                    Log("PKT_HELLO("+sender+")\n");
                    HELLO_rcv++;
                    // Update values
                    int dist= dis.readInt();
                    if (dis.available() != 0) {
                        Log("Packet too long\n");
                        return false;
                    }
                    if (tbuttonActive.isSelected()) {
                        boolean ok= neig.add_neig(sender, ip.getHostAddress(), 
                            dp.getPort(), dist, ds);
                        if (ok) {
                            neig.refresh_table(tabelaViz);
                        }
                    }
                    break;
                case PKT_BYE:
                    Log("PKT_BYE("+sender+")\n");
                    BYE_rcv++;
                    if (dis.available() != 0) {
                        Log("Packet too long\n");
                        return false;
                    }
                    if (tbuttonActive.isSelected()) {
                        boolean ok= neig.del_neig(sender, false, ds);
                        if (ok) {
                            neig.refresh_table(tabelaViz);
                        }
                    }
                    break;
                case PKT_ROUTE:
                    ROUTE_rcv++; 
                    return route.process_ROUTE(sender, dp, ip.getHostAddress(), dis);
                case PKT_DATA:
                    DATA_rcv++;
                    return route.process_DATA(sender, dp, ip.getHostAddress(), dis);
                default:
                    Log("Invalid packet code ("+code+")\n");
                    INVALID_rcv++;
                    return false;
                }
            }
            catch(IOException e) {
                Log("Packet too short\n");
                return false;
            }
            return true;
    }

    
/**************************************************************/
    
   /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new Router().setVisible(true);
    }
    
    /**
     * Write messages in the log window and in the command line
     * @param s  message to write
     */
    public void Log(final java.lang.String s) {
        logText.append(s);
        System.out.print(s);
    }         

    /** 
     * Clear statistics 
     */
    public void zero_statistics() {
        HELLO_snt= 0;
        HELLO_rcv= 0;
        BYE_snt= 0;
        BYE_rcv= 0;
        ROUTE_snt= 0;
        ROUTE_rcv= 0;
        DATA_snt= 0;
        DATA_rcv= 0;
        INVALID_rcv= 0;
    }
    
    /** 
     * Write statistics 
     */
    public void write_statistics() {
        Log("****Statistics**********************************************\n"+
            "HELLO snt:"+HELLO_snt+" rcv:"+HELLO_rcv+
            "; BYE snt:"+BYE_snt+" rcv:"+BYE_rcv+
            "\nROUTE snt:"+ROUTE_snt+" rcv:"+ROUTE_rcv+
            "; DATA snt:"+DATA_snt+" rcv:"+DATA_rcv+
            "; Invalid rcv:"+INVALID_rcv+"\n"+
            "************************************************************\n");
    }
    
    ////////////////////////////////////////////////////////////////////
    
    /** Datagram socket */
    private DatagramSocket ds;
    /** Socket daemon */
    private UnicastDaemon daemon;
    /** meighbour list */
    private final NeighbourList neig;
    /** Routing object */
    private Routing route;
    /** Local address (e.g "A.1") */
    private final Address local_address;
    /** Local IP addresses list and IP translation support */
    public static LocalIPaddresses IPaddresses;
    
    /* Statistical counters */
    public int HELLO_snt;
    public int HELLO_rcv;
    public int BYE_snt;
    public int BYE_rcv;
    public int ROUTE_snt;   // only counts local Routing
    public int ROUTE_rcv;
    public int DATA_snt;
    public int DATA_rcv;
    public int INVALID_rcv;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDist;
    private javax.swing.JButton buttonEnviar;
    private javax.swing.JCheckBox buttonHierarchical;
    private javax.swing.JButton buttonRem;
    private javax.swing.JTextField editIP;
    private javax.swing.JTextField editMensagem;
    private javax.swing.JTextField editName;
    private javax.swing.JTextField editNeigDist;
    private javax.swing.JTextField editNeigIP;
    private javax.swing.JTextField editNeigName;
    private javax.swing.JTextField editNeigPorto;
    private javax.swing.JTextField editNomeDest;
    private javax.swing.JTextField editPeriodo;
    private javax.swing.JTextField editPorto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea logText;
    private javax.swing.JTable tabelaRoute;
    private javax.swing.JTable tabelaViz;
    private javax.swing.JToggleButton tbuttonActive;
    // End of variables declaration//GEN-END:variables
  
}
